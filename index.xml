<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dart and Flutter. DOs and DONTs for developers on implementationDetails('flutter')</title><link>https://boehrsi.github.io/implementation-details-flutter/</link><description>Recent content in Dart and Flutter. DOs and DONTs for developers on implementationDetails('flutter')</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 12 Sep 2020 16:00:00 +0200</lastBuildDate><atom:link href="https://boehrsi.github.io/implementation-details-flutter/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://boehrsi.github.io/implementation-details-flutter/about/</link><pubDate>Sat, 12 Sep 2020 16:00:00 +0200</pubDate><guid>https://boehrsi.github.io/implementation-details-flutter/about/</guid><description>This project is a community driven approach to collect best practices around Dart and Flutter. This platform is meant to be an addition to the official guidelines. It could be considered as go-to source for fast information about a specific topic without reading a whole blog entry or watching a video tutorial.
Everything you will find here will be as objective as possible, but as writing code often is highly subjective, don&amp;rsquo;t just copy and paste everything you see here.</description></item><item><title>Async methods should return futures</title><link>https://boehrsi.github.io/implementation-details-flutter/entries/async-methods-should-return-futures/</link><pubDate>Sat, 12 Sep 2020 16:00:00 +0200</pubDate><guid>https://boehrsi.github.io/implementation-details-flutter/entries/async-methods-should-return-futures/</guid><description>Any async method should wrap the expected return type in a Future, this is also valid for void methods. This way you ensure your code is understandable and future proof.</description></item><item><title>Contribute</title><link>https://boehrsi.github.io/implementation-details-flutter/contribute/</link><pubDate>Sat, 12 Sep 2020 16:00:00 +0200</pubDate><guid>https://boehrsi.github.io/implementation-details-flutter/contribute/</guid><description>This project is community driven and will life from your contributions. Thanks for considering helping to improve this project.
To contribute please follow the upcoming steps:
Links Issues Pull requests General requirements GitHub Account Be nice to other people Be open for discussions You found an error? Check if an issue exists for the given problem and if not please create one Add all required information You want to contribute content or code?</description></item><item><title>Generators with yield*</title><link>https://boehrsi.github.io/implementation-details-flutter/entries/generators-with-yield/</link><pubDate>Sat, 12 Sep 2020 16:00:00 +0200</pubDate><guid>https://boehrsi.github.io/implementation-details-flutter/entries/generators-with-yield/</guid><description>Generator functions in Dart are pretty useful, but it&amp;rsquo;s important to use them the right way. It&amp;rsquo;s required to use the yield* prefix for related method calls, as without the function won&amp;rsquo;t be called at all.
This leads to malfunctions and is also quite hard to debug, as it&amp;rsquo;s not obvious (no errors are thrown).</description></item><item><title>Underscore for unused parameters</title><link>https://boehrsi.github.io/implementation-details-flutter/entries/underscore-for-unused-parameters/</link><pubDate>Sat, 12 Sep 2020 16:00:00 +0200</pubDate><guid>https://boehrsi.github.io/implementation-details-flutter/entries/underscore-for-unused-parameters/</guid><description>Sometimes you have to deal with given functions, interface implementations or builders, with parameters you don&amp;rsquo;t use. When utilizing those you can use an underscore to actively mark unneeded parameters as not used in your code. You can use multiple underscores if multiple parameters are unused.</description></item></channel></rss>